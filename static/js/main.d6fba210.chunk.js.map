{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","every","y","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"sNAwBA,SAASA,EAAOC,GAEf,OACC,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACEF,EAAMG,Q,IAIJC,E,2KAkBWC,GAAI,IAAD,OACnB,OAAQ,cAACN,EAAD,CACPI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,mEAuEnC,OACQ,gCACP,sBAAKJ,UAAU,YAAf,UACCK,KAAKE,aAAa,GACfF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAEtB,sBAAKP,UAAU,YAAf,UACCK,KAAKE,aAAa,GACfF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAEtB,sBAAKP,UAAU,YAAf,UACCK,KAAKE,aAAa,GACfF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA3GJC,IAAMC,WAwHpBC,E,kDACF,WAAYX,GAAQ,IAAD,8BACtB,cAAMA,IACDY,MAAQ,CACZC,QAAS,CAAC,CACTN,QAASO,MAAM,GAAGC,KAAK,QAExBC,SAAS,EACTC,WAAY,GAPS,E,wDAUVZ,GAEX,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMK,WAAa,GAE9DV,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMI,QAAU,IAAM,IACxCV,KAAKe,SAAS,CACbR,QAASA,EAAQS,OAAO,CAAC,CACxBf,QAASA,KAEVU,WAAYJ,EAAQM,OACpBH,SAAUV,KAAKM,MAAMI,a,6BAGhBO,GACNjB,KAAKe,SAAS,CACdJ,WAAYM,EACZP,QAAUO,EAAO,IAAO,M,+BAGZ,IAgBTC,EAhBQ,OACNX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMK,YAC7BS,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAChC,IAAMC,EAAOD,EACZ,eAAiBA,EACjB,mBACD,OACA,6BACC,yBAAQ3B,QAAS,kBAAM,EAAK6B,OAAOF,IAAnC,UAA2CC,EAA3C,QADQD,MAcV,OAPIH,EACHF,EAAS,WAAaE,EAEtBF,EADiBC,EAAQlB,QAmDXyB,OAAM,SAACC,GAAD,OAAOA,KAlDlB,OAEA,iBAAmB3B,KAAKM,MAAMI,QAAU,IAAM,KAIhD,sBAAKf,UAAU,OAAf,UACP,qBAAKA,UAAU,aAAf,SACA,cAACG,EAAD,CACCG,QAASkB,EAAQlB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK6B,YAAY7B,QAGlC,sBAAKJ,UAAU,YAAf,UACA,8BAAMuB,IACN,6BAAKG,c,GArEYlB,IAAMC,WAkFzB,SAASU,EAAgBb,GAWxB,IAVA,IAAM4B,EAAQ,CACT,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEH9B,EAAI,EAAGA,EAAI8B,EAAMhB,OAAQd,IAAK,CAAC,IAAD,cACpB8B,EAAM9B,GADc,GAC/B+B,EAD+B,KAC5BC,EAD4B,KACzBC,EADyB,KAEtC,GAAI/B,EAAQ6B,IAAM7B,EAAQ6B,KAAO7B,EAAQ8B,IAAM9B,EAAQ6B,KAAO7B,EAAQ+B,GACrE,OAAO/B,EAAQ6B,GAGjB,OAAO,KArBRG,IAASC,OACR,cAAC7B,EAAD,IACG8B,SAASC,eAAe,W","file":"static/js/main.d6fba210.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// class Square extends React.Component {\n/*\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tvalue: null,\n\t\t};\n\t} */\n/*\n    render() {\n\treturn (\n\t        <button className=\"square\"\n\t//\t\tonClick={() => this.(setState{value: 'X'})}\n\t\t\tonClick={() => this.props.onClick()}\n\t\t>\n\t\t{this.props.value}\n\t    </button>\n\t);\n    }\n}*/\nfunction Square(props) {\n // No parenthesis after onClick\n\treturn (\n\t\t<button className=\"square\" onClick={props.onClick}>\n\t\t\t{props.value}\n\t\t</button>\n\t);\n}\nclass Board extends React.Component {\n\t/*\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\tsquares: Array(9).fill(null),\n\t\txIsNext: true,\n\t\t};\n\t}\n*/\n/*\n\thandleClick(i) {\n\t\tconst squares = this.state.squares.slice();\n\t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\n\t\tthis.setState({squares: squares,\n\t\t\t\txIsNext: !this.state.xIsNext,});\n\t}\n*/\n    renderSquare(i) {\n\treturn (<Square\n\t\tvalue={this.props.squares[i]}\n\t\tonClick={() => this.props.onClick(i)}\n\t\t/>\n\t\t);\n    }\n\tgetBoard ()\n    {\n\t\n\t\t/*return(\n\t\t<div>\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t<div className=\"board-row\">\n\t\t\tfor (let j = i * 3; j < i + 3; j++) {\n\t\t\t\t{this.renderSquare(j)}\n\t\t\t}\n\t\t\t</div>\n\t\t}\n\t\t</div>);\n*/\n/*\n\t\tlet content = [];\n\t\tcontent.push(<div>);\n\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tcontent.push(<div className=\"board-row\">);\n\t\t\tfor (let j = i * 3; j < i + 3; j++) {\n\t\t\t\tcontent.push({this.renderSquare(j)});\n\t\t\t}\n\t\t\tcontent.push(</div>);\n\t\t}\n\t\tcontent.push(</div>);\n\t\treturn content\n*/\n/*\n\t\tlet content = [];\n\t\tcontent.push(<div>);\n\t\tfor (let i in [..Array[9].keys()]) {\n\t\t\tif ((i%3)) {\n\t\t\t\tcontent.push(<div className=\"board-row\">);\n\t\t\t}\n\t\t\tcontent.push({this.renderSquare(i)});\n\t\t\t\n\t\t\tif (!(i%3)) {\n\t\t\t\tcontent.push(</div>);\n\t\t\t}\n\t\t}\n\t\treturn content\n*/\n/*\n\treturn (<div> \n\t\t[...Array[9].keys()].map((x) =>{if (!(x % 3)) {<div className=\"board-row\"> this.renderSquare(x)} }</div>);\n*/\n\n/*\n\treturn (<div> \n\t\t[...Array[9].keys()].map((x) =>{\n\t\t\t(x % 3) ? {this.renderSquare(i)} : <div className=\"board-row\">\n\t\t);\n\t\t</div>\n    }\n*/\n}\n    render() {\n\t/*\n\tconst winner = calculateWinner(this.state.squares);\n\tlet status;\n\tif (winner) {\n\t\tstatus = 'Winner: ' + winner;\n\t} else {\n\t\tstatus = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\t}\n*/\n\treturn (\n\t        <div>\n\t\t<div className=\"board-row\">\n\t\t{this.renderSquare(0)}\n\t    {this.renderSquare(1)}\n\t    {this.renderSquare(2)}\n\t    </div>\n\t\t<div className=\"board-row\">\n\t\t{this.renderSquare(3)}\n\t    {this.renderSquare(4)}\n\t    {this.renderSquare(5)}\n\t    </div>\n\t\t<div className=\"board-row\">\n\t\t{this.renderSquare(6)}\n\t    {this.renderSquare(7)}\n\t    {this.renderSquare(8)}\n\t    </div>\n\t\t</div>\n\t);\n\n\n/*\n\treturn (\n\t\t{this.getBoard()}\n\t);\n*/\n    }\n}\nclass Game extends React.Component {\n    constructor(props) {\n\tsuper(props);\t\n\tthis.state = {\n\t\thistory: [{\n\t\t\tsquares: Array(9).fill(null),\n\t\t}],\n\t\txIsNext: true,\n\t\tstepNumber: 0,\n\t};\n   }\n\thandleClick(i) {\n\t\t// const history = this.state.history;\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\n\t\tconst current = history[history.length - 1];\n\t\tconst squares = current.squares.slice();\n\t\tif (calculateWinner(squares) || squares[i]) {\n\t\t\treturn;\n\t\t}\n\t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\n\t\tthis.setState({\n\t\t\thistory: history.concat([{\n\t\t\t\tsquares: squares,\n\t\t\t}]),\n\t\t\tstepNumber: history.length,\n\t\t\txIsNext: !this.state.xIsNext,\n\t\t});\n\t}\n\tjumpTo(step) {\n\t\tthis.setState({\n\t\tstepNumber: step,\n\t\txIsNext: (step % 2) === 0,\n\t\t});\n\t}\n    render() {\n\tconst history = this.state.history;\n\tconst current = history[this.state.stepNumber];\n\tconst winner = calculateWinner(current.squares);\n\t\n\tconst moves = history.map((step, move) => {\n\t\tconst desc = move ?\n\t\t\t'Go to move #' + move :\n\t\t\t'Go to game start';\n\t\treturn (\n\t\t<li key={move}>\n\t\t\t<button onClick={() => this.jumpTo(move)}>{desc} </button>\n\t\t</li>\n\t\t);\n\t});\n\t\n\tlet status;\n\tif (winner) {\n\t\tstatus = 'Winner: ' + winner;\n\t} else if (isDraw(current.squares)) {\n\t\tstatus = 'Draw'\n\t} else {\n\t\tstatus = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\t}\n\treturn (\n\n\t        <div className=\"game\">\n\t\t<div className=\"game-board\">\n\t\t<Board \n\t\t\tsquares={current.squares}\n\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t/>\n\t\t</div>\n\t\t<div className=\"game-info\">\n\t\t<div>{status}</div>\n\t\t<ol>{moves}</ol>\n\t\t</div>\n\t\t</div>\n\t);\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n\t<Game />,\n    document.getElementById('root')\n);\nfunction calculateWinner(squares) {\n\tconst lines = [\n\t\t    [0, 1, 2],\n\t\t    [3, 4, 5],\n\t\t    [6, 7, 8],\n\t\t    [0, 3, 6],\n\t\t    [1, 4, 7],\n\t\t    [2, 5, 8],\n\t\t    [0, 4, 8],\n\t\t    [2, 4, 6],\n\t\t  ];\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst [a, b, c] = lines[i];\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\t\t\treturn squares[a];\n\t\t}\n\t}\n\treturn null;\n}\n\nfunction isDraw(squares) {\n\t// return squares.map((x) => x.every((y) => y)).every((y) => y)\n\treturn squares.every((y) => y)\n}\n"],"sourceRoot":""}